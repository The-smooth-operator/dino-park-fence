---
apiVersion: v1
kind: ConfigMap
metadata:
  name: wants-gatekeeper
  namespace: {{ .Values.namespace }}
data:
  nginx.conf: |
    worker_rlimit_nofile 8192;

    events {
      worker_connections  4096;  ## Default: 1024
    }

    http {
      proxy_redirect          off;
      proxy_set_header        Host            $host;
      proxy_set_header        X-Real-IP       $remote_addr;
      proxy_set_header        X-Forwarded-For $proxy_add_x_forwarded_for;
      client_max_body_size    32m;
      client_body_buffer_size 128k;
      proxy_connect_timeout   90;
      proxy_send_timeout      90;
      proxy_read_timeout      90;
      proxy_buffers           32 4k;
      resolver                kube-dns.kube-system.svc.cluster.local  valid=5s;

      map $http_cookie $target {
        default "dino-park-front-end-service.{{ .Values.namespace }}.svc.cluster.local:80";

        "~*pmo-auto-login=1" "gatekeeper.{{ .Values.namespace }}.svc.cluster.local:80";
        "~*pmo-access=([^;]+)" "gatekeeper.{{ .Values.namespace }}.svc.cluster.local:80";
      }

      server {
        listen 80;

        location /login {
          proxy_pass http://gatekeeper.{{ .Values.namespace }}.svc.cluster.local:80/;
        }

        location /oauth {
          proxy_pass http://gatekeeper.{{ .Values.namespace }}.svc.cluster.local:80;
        }

        location / {
          proxy_pass http://$target;
        }
      }
    }

---
apiVersion: extensions/v1beta1
kind: Deployment
metadata:
  name: wants-gatekeeper
  namespace: {{ .Values.namespace }}
  labels:
    app: wants-gatekeeper
spec:
  replicas: {{ .Values.router_replicas }}
  template:
    metadata:
      labels:
        app: wants-gatekeeper
    spec:
      volumes:
      - name: wants-gatekeeper
        configMap:
          name: wants-gatekeeper
      containers:
      - name: wants-gatekeeper
        image: nginx
        ports:
        - name: http
          containerPort: 80
        env:
        - name: force_update
          value: "1"
        volumeMounts:
        - name: wants-gatekeeper
          mountPath: /etc/nginx/
          readOnly: true

---
apiVersion: v1
kind: Service
metadata:
  annotations:
  labels:
    name: wants-gatekeeper
  name: wants-gatekeeper
  namespace: {{ .Values.namespace }}
spec:
  ports:
  - protocol: TCP
    port: 80
    targetPort: 80
  selector:
    app: wants-gatekeeper
